mod entries;
mod apis;

use std::fmt::format;
use std::string::ToString;
use cliclack::{intro, outro, select, set_theme};
use crate::entries::{Entry, EntryKind};
use crate::entries::mcp_entry::MCPEntry;
use crate::entries::mods_entry::ModsEntry;

// _____ _               _   _           _       _
// |  ___| | _____      _| | | |_ __   __| | __ _| |_ ___ _ __
// | |_  | |/ _ \ \ /\ / / | | | '_ \ / _` |/ _` | __/ _ \ '__|
// |  _| | | (_) \ V  V /| |_| | |_) | (_| | (_| | ||  __/ |
// |_|   |_|\___/ \_/\_/  \___/| .__/ \__,_|\__,_|\__\___|_|
// _ ____   ___  _   _    |_|_ ____  _____    _  _____ ___  ____
// | / ___| / _ \| \ | |  / ___|  _ \| ____|  / \|_   _/ _ \|  _ \
// _  | \___ \| | | |  \| | | |   | |_) |  _|   / _ \ | || | | | |_) |
// | |_| |___) | |_| | |\  | | |___|  _ <| |___ / ___ \| || |_| |  _ <
// \___/|____/ \___/|_| \_|  \____|_| \_\_____/_/   \_\_| \___/|_| \_\

// const title : &str = format(r#"
//   _____ _               _   _           _       _
//   |  ___| | _____      _| | | |_ __   __| | __ _| |_ ___ _ __
//   | |_  | |/ _ \ \ /\ / / | | | '_ \ / _` |/ _` | __/ _ \ '__|
//   |  _| | | (_) \ V  V /| |_| | |_) | (_| | (_| | ||  __/ |
//   |_|   |_|\___/ \_/\_/  \___/| .__/ \__,_|\__,_|\__\___|_|
//      _ ____   ___  _   _    |_|_ ____  _____    _  _____ ___  ____
//     | / ___| / _ \| \ | |  / ___|  _ \| ____|  / \|_   _/ _ \|  _ \
//  _  | \___ \| | | |  \| | | |   | |_) |  _|   / _ \ | || | | | |_) |
// | |_| |___) | |_| | |\  | | |___|  _ <| |___ / ___ \| || |_| |  _ <
//  \___/|____/ \___/|_| \_|  \____|_| \_\_____/_/   \_\_| \___/|_| \_\
//  :: {} ::"#, env!("CARGO_PKG_VERSION"));

// Print
////   _____ _               _   _           _       _
// //   |  ___| | _____      _| | | |_ __   __| | __ _| |_ ___ _ __
// //   | |_  | |/ _ \ \ /\ / / | | | '_ \ / _` |/ _` | __/ _ \ '__|
// //   |  _| | | (_) \ V  V /| |_| | |_) | (_| | (_| | ||  __/ |
// //   |_|   |_|\___/ \_/\_/  \___/| .__/ \__,_|\__,_|\__\___|_|
// //      _ ____   ___  _   _    |_|_ ____  _____    _  _____ ___  ____
// //     | / ___| / _ \| \ | |  / ___|  _ \| ____|  / \|_   _/ _ \|  _ \
// //  _  | \___ \| | | |  \| | | |   | |_) |  _|   / _ \ | || | | | |_) |
// // | |_| |___) | |_| | |\  | | |___|  _ <| |___ / ___ \| || |_| |  _ <
// //  \___/|____/ \___/|_| \_|  \____|_| \_\_____/_/   \_\_| \___/|_| \_\
// //  :: {} ::"#, env!("CARGO_PKG_VERSION"));

const banner : &str = r#"
  _____ _               _   _           _       _
  |  ___| | _____      _| | | |_ __   __| | __ _| |_ ___ _ __
  | |_  | |/ _ \ \ /\ / / | | | '_ \ / _` |/ _` | __/ _ \ '__|
  |  _| | | (_) \ V  V /| |_| | |_) | (_| | (_| | ||  __/ |
  |_|   |_|\___/ \_/\_/  \___/| .__/ \__,_|\__,_|\__\___|_|
     _ ____   ___  _   _    |_|_ ____  _____    _  _____ ___  ____
    | / ___| / _ \| \ | |  / ___|  _ \| ____|  / \|_   _/ _ \|  _ \
 _  | \___ \| | | |  \| | | |   | |_) |  _|   / _ \ | || | | | |_) |
| |_| |___) | |_| | |\  | | |___|  _ <| |___ / ___ \| || |_| |  _ <
 \___/|____/ \___/|_| \_|  \____|_| \_\_____/_/   \_\_| \___/|_| \_\
"#;



fn main() -> Result<(), Box<dyn std::error::Error>>{
    let subtitle: String = format!(":: {} ::\t\t\t\t\t\t     (v{})", env!("CARGO_PKG_NAME"), env!("CARGO_PKG_VERSION")).to_string();

    intro(format!("{}{}", banner, subtitle))?;

    let selected_entry: EntryKind = select("What kind of JSON do you want to generate ?")
        .item(EntryKind::ModEntry, "Mods (mods.json)", "")
        .item(EntryKind::MCPEntry, "MCP (mcp.json)", "")
        .interact()?;

    let entry: Box<dyn Entry> = match selected_entry {
        EntryKind::ModEntry => Box::new(ModsEntry{}),
        EntryKind::MCPEntry => Box::new(MCPEntry{}),
    };

    entry.start();

    outro("Thanks you for using");

    Ok(())
}
